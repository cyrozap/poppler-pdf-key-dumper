diff --git a/poppler/SecurityHandler.cc b/poppler/SecurityHandler.cc
index 056ba3bd..8197e041 100644
--- a/poppler/SecurityHandler.cc
+++ b/poppler/SecurityHandler.cc
@@ -33,6 +33,7 @@
 #include "SecurityHandler.h"
 
 #include <climits>
+#include <stdio.h>
 
 //------------------------------------------------------------------------
 // SecurityHandler
@@ -143,6 +144,7 @@ StandardSecurityHandler::StandardSecurityHandler(PDFDoc *docA, Object *encryptDi
     if (versionObj.isInt() && revisionObj.isInt() && permObj.isInt() && ownerKeyObj.isString() && userKeyObj.isString()) {
         encVersion = versionObj.getInt();
         encRevision = revisionObj.getInt();
+        printf("$pdf$%d*%d*", encVersion, encRevision);
         if ((encRevision <= 4 && ownerKeyObj.getString()->getLength() >= 1 && userKeyObj.getString()->getLength() >= 1)
             || ((encRevision == 5 || encRevision == 6) &&
                 // the spec says 48 bytes, but Acrobat pads them out longer
@@ -252,6 +254,30 @@ StandardSecurityHandler::StandardSecurityHandler(PDFDoc *docA, Object *encryptDi
                     userKey->append((char)0x00);
                 }
             }
+
+            printf("%d*%d*%d*%d*", fileKeyLength*8, permFlags, encryptMetadata ? 1 : 0, fileID->getLength());
+            for (int i = 0; i < fileID->getLength(); i++) {
+                printf("%02x", fileID->getChar(i) & 0xff);
+            }
+            printf("*%d*", userKey->getLength());
+            for (int i = 0; i < userKey->getLength(); i++) {
+                printf("%02x", userKey->getChar(i) & 0xff);
+            }
+            printf("*%d*", ownerKey->getLength());
+            for (int i = 0; i < ownerKey->getLength(); i++) {
+                printf("%02x", ownerKey->getChar(i) & 0xff);
+            }
+            if (ownerEncObj.isString() && userEncObj.isString()) {
+                printf("*%d*", userEnc->getLength());
+                for (int i = 0; i < userEnc->getLength(); i++) {
+                    printf("%02x", userEnc->getChar(i) & 0xff);
+                }
+                printf("*%d*", ownerEnc->getLength());
+                for (int i = 0; i < ownerEnc->getLength(); i++) {
+                    printf("%02x", ownerEnc->getChar(i) & 0xff);
+                }
+            }
+            printf("\n");
         } else {
             error(errSyntaxError, -1,
                   "Invalid encryption key length. version: {0:d} - revision: {1:d} - ownerKeyLength: {2:d} - userKeyLength: {3:d} - ownerEncIsString: {4:d} - ownerEncLength: {5:d} - userEncIsString: {6:d} - userEncLength: {7:d}",
